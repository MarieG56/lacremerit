generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now()) @updatedAt
  subcategories Subcategory[]
  products      Product[]
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  name       String
  categoryId Int
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  category   Category  @relation(fields: [categoryId], references: [id])
  products   Product[]
}

model Producer {
  id          Int       @id @default(autoincrement())
  name        String
  address     String?
  email       String?
  phoneNumber String?
  contactInfo String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  products    Product[]
}

model Product {
  id            Int              @id @default(autoincrement())
  name          String
  unit          Unit
  description   String?
  categoryId    Int
  subcategoryId Int?
  producerId    Int
  isActive      Boolean          @default(true)
  created_at    DateTime         @default(now())
  updated_at    DateTime         @default(now()) @updatedAt
  category      Category         @relation(fields: [categoryId], references: [id])
  subcategory   Subcategory?     @relation(fields: [subcategoryId], references: [id])
  producer      Producer         @relation(fields: [producerId], references: [id])
  histories     ProductHistory[]
  orderItems  OrderItem[]
}

model ProductHistory {
  id               Int      @id @default(autoincrement())
  productId        Int
  price            Float?
  weekStartDate    DateTime
  receivedQuantity Int      @default(0)
  soldQuantity     Int      @default(0)
  unsoldQuantity   Int      @default(0)
  description      String?
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now()) @updatedAt
  product          Product  @relation(fields: [productId], references: [id])
}

model Customer {
  id          Int      @id @default(autoincrement())
  name        String
  address     String?
  email       String?
  phoneNumber String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  orders      Order[]
}

model Order {
  id          Int         @id @default(autoincrement())
  customerId  Int?        // rendu optionnel
  clientId    Int?        // nouveau champ
  orderDate   DateTime    @default(now())
  status      OrderStatus @default(PENDING)
  totalAmount Float
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now()) @updatedAt
  customer    Customer?   @relation(fields: [customerId], references: [id])
  client      Client?     @relation(fields: [clientId], references: [id])
  orderItems  OrderItem[]
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  unitPrice Float

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model Client {
  id          Int       @id @default(autoincrement())
  name        String
  address     String?
  email       String?
  phoneNumber String?
  contactInfo String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  orders      Order[]
}

enum Unit {
  KG
  L
  UN
}

enum OrderStatus {
  PENDING
  PREPARED
  CANCELLED
}
